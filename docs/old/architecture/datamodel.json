# MongoDB allows creation of 'collections' on-the-fly with a simple 
# API call. We use this to distinguish sessions, i.e., as the top-level
# (root) namespace for a RADICAL-Pilot instance. This also makes 
# reconnactability pretty intuitive. 

# This is a pilot manager document. It represents a pilot manager.
# It lives in a collection called sinon.<SID>.pilotmanagers.
# ensureIndex( {} )
#
{
    "_id": "objectID()",
}

# This is a queue document. It represent a task manager. It lives  
# in a collection called sinon.<SID>.queues
# ensureIndex( {} )
#
{
    "_id": "objectID()",
}


# This is a pilot document. It represents a pilot. It lives in a
# collection called sinon.<SID>.pilots
# ensureIndex( {} )
#
{
    "_id": "objectID()",
    "_PilotManagerID": "pilotmanager.objectID()",

    "Info": {
        "State": "BSON.STRING",
        "StartTime": "BSON.Date",
        "EndTime": "BSON.Date",
        "Nodes": ["BSON.STRING", "BSON.STRING", "..."]
    }
}

# This is a task document. It represents a task.
# It lives in a collection called sinon.<SID>.computetasks 
# ensureIndex( { "_ManagerID": 1, "_PilotID": 1 } )
{
    "_id": "objectID()",
    "_TaskManagerID": "manager.objectID()",
    "_PilotID:": "pilot.objectID()",

    "Name": "BSON.STRING",
    "Description": {
        "Name": "BSON.STRING",
        "Executable": "BSON.STRING",
        "Arguments": ["BSON.STRING", "BSON.STRING", "..."],
        "Environment": "BSON.STRING",
        "StartTime": "BSON.STRING",
        "RunTime": "BSON.STRING",
        "WorkingDirectory": "BSON.STRING",
        "Input": "BSON.STRING",
        "Output": "BSON.STRING",
        "Error": "BSON.STRING",
        "Slots": "BSON.STRING"
    },
    "Info": {
        "State": "BSON.STRING",
        "SubmitTime": "BSON.Date",
        "StartTime": "BSON.Date",
        "EndTime": "BSON.Date" 
    }

}
