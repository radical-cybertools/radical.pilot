# -*- coding: utf-8 -*-
#
# RADICAL-Pilot documentation build configuration file, created by
# sphinx-quickstart on Mon Dec  3 21:55:42 2012.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import glob
import imp
import sys
import os
import radical.utils as ru
import pprint
import subprocess as sp

script_dir = os.path.dirname(os.path.realpath(__file__))

################################################################################

cmd = "git branch | grep '*' | cut -f 2 -d \ " \
    + " | sed -e 's/readthedocs.tutorial/tutorial/g' " \
    + " | sed -e 's/readthedocs/release/g'"
mytag = sp.Popen(cmd, shell=True, stdout=sp.PIPE).stdout.read().strip()

if 'detached' in mytag :
    cmd = "git branch | grep '*' | cut -f 2 -d '/' | cut -f 1 -d ')'" \
        + " | sed -e 's/readthedocs.tutorial/tutorial/g' " \
        + " | sed -e 's/readthedocs/release/g'"
    mytag = sp.Popen(cmd, shell=True, stdout=sp.PIPE).stdout.read().strip()

tags.add (mytag)

################################################################################
##
print "* Generating resource configuration docs: resources.rst"
print "* using tag: %s" % mytag

try:
    os.remove("{0}/resources.rst".format(script_dir))
except OSError:
    pass

with open("{0}/resources.rst".format(script_dir), "w") as resources_rst:

    resources_rst.write("""

.. _chapter_resources:

List of Pre-Configured Resources
================================

""")

    import glob
    configs = glob.glob("%s/../../src/radical/pilot/configs/resource_*.json" % script_dir)
    for config in configs:

        if not config.endswith(".json"):
            continue # skip all non-python files

        if "/resource_aliases" in config:
            continue # skip alias files

        print " * %s" % config

        try: 
             json_data = ru.read_json_str(config)
        except Exception, ex:
             print "    * JSON PARSING ERROR: %s" % str(ex)
             continue

        config = config.split('/')[-1]

        resources_rst.write("{0}\n".format(config[:-5].upper()))
        resources_rst.write("{0}\n\n".format("="*len(config[:-5])))

        for host_key, resource_config in json_data.iteritems():
            resource_key = "%s.%s" % (config[:-5], host_key)
            print "   * %s" % resource_key
            try:
                default_queue = resource_config["default_queue"]
            except Exception, ex:
                default_queue = None

            try:
                working_dir = resource_config["default_remote_workdir"]
            except Exception, ex:
                working_dir = "$HOME"

            try:
                python_interpreter = resource_config["python_interpreter"]
            except Exception, ex:
                python_interpreter = None

            try:
                access_schemas = resource_config["schemas"]
            except Exception, ex:
                access_schemas = ['n/a']

            resources_rst.write("{0}\n".format(host_key.upper()))
            resources_rst.write("{0}\n\n".format("*"*len(host_key)))
            resources_rst.write("{0}\n\n".format(resource_config["description"]))
            resources_rst.write("* **Resource label**      : ``{0}``\n".format(resource_key[9:]))
            resources_rst.write("* **Raw config**          : :download:`{0} <../../src/radical/pilot/configs/{0}>`\n".format(config))
            if resource_config["notes"] != "None":
                resources_rst.write("* **Note**            : {0}\n".format(resource_config["notes"]))
            resources_rst.write("* **Default values** for ComputePilotDescription attributes:\n\n")
            resources_rst.write(" * ``queue         : {0}``\n".format(default_queue))
            resources_rst.write(" * ``sandbox       : {0}``\n".format(working_dir))
            resources_rst.write(" * ``access_schema : {0}``\n\n".format(access_schemas[0]))
            resources_rst.write("* **Available schemas**   : ``{0}``\n".format(', '.join(access_schemas)))
            resources_rst.write("\n")

##
################################################################################

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
sys.path.insert(0, os.path.abspath('../../src/'))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = ['sphinx.ext.autodoc', 
              'sphinx.ext.doctest',
              'sphinx.ext.intersphinx',
              'sphinx.ext.todo',
              'sphinx.ext.coverage',
              'sphinx.ext.pngmath',
              'sphinx.ext.ifconfig',
              'sphinx.ext.viewcode',
              'sphinx.ext.extlinks']

[extensions]
todo_include_todos=True

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

rst_epilog = """
"""

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'RADICAL-Pilot'
copyright = u'2014, The RADICAL Group at Rutgers University'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#

try:
    import radical.pilot
    version = radical.pilot.version
    release = radical.pilot.version
except Exception as e:
    print 'Could not determine version: %s' % e
    version = "UNKNOWN"
    release = "UNKNOWN"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ["_themes"]

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


extlinks = {'issue': ('https://github.com/radical-cybertools/radical.pilot/issues/%s',
                      'issue ')}

# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#html_theme = 'default'

html_theme = "armstrong"
html_theme_path = ["_themes", ]

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {
"collapsiblesidebar" : "true",
}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = 'images/logo.jpg'

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'radical.pilot.doc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'RADICAL-Pilot.tex', u'RADICAL-Pilot Documentation',
   u'The RADICAL Group at Rutgers University', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = 'images/logo.jpg'

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
latex_show_pagerefs = True

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'radical.pilot', u'RADICAL-Pilot Documentation',
     [u'The RADICAL Group at Rutgers University'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'RADICAL-Pilot', u'RADICAL-Pilot Documentation',
   u'The RADICAL Group at Rutgers University', 'RADICAL-Pilot', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'


# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'http://docs.python.org/': None}


autodoc_member_order  = 'bysource'
autodoc_default_flags = ['members'] #, 'undoc-members', 'show-inheritance']
