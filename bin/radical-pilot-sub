#!/usr/bin/env python

__copyright__ = "Copyright 2014-2016, http://radical.rutgers.edu"
__license__   = "MIT"

import sys
import time

import setproctitle  as spt
import radical.utils as ru

DELAY = 0.0


# ------------------------------------------------------------------------------
#
if __name__ == "__main__":
    '''
    This thin wrapper connects to a ZMQ communication bridge, receives all
    messages it finds on the bridge's channel, and prinnts them to stdout.  The
    argument specifies the bridge to connect to.  We expect to find
    a `$name.url` file in `$PWD`, from which we'll dig the bridge address to
    use.  It is the responsibility of the caller to ensure that the respective
    bridge exists.
    '''

    if len(sys.argv) < 3:
        sys.stderr.write('error: missing argument\n'
                         'usage: %s <channel> <topic1> [...]\n\n' % sys.argv[0])
        raise RuntimeError('missing argument')


    # setup channel
    name   = sys.argv[1]
    topics = sys.argv[2:]
    sub    = ru.Subscriber(name)

    for topic in topics:
        sub.subscribe(topic)

    # mark this process
    spt.setproctitle('rp.%s' % sub.uid)

    start = time.time()
    n = 0
    while True:

        topic, msg = sub.get()

        if msg.get('cmd') == 'QUIT':
            break

        n += 1

        time.sleep(DELAY)

    stop = time.time()
    print 'rate: %.2f msg/s' % ((n * len(topics)) / (stop - start))


# ------------------------------------------------------------------------------

