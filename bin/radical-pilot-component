#!/usr/bin/env python

__copyright__ = "Copyright 2014-2016, http://radical.rutgers.edu"
__license__   = "MIT"


import os
import sys
import atexit

import setproctitle        as spt

import radical.utils       as ru
import radical.pilot.utils as rpu


@atexit.register
def term():
    sys.stderr.write('bridge terminated\n')
    sys.stderr.flush()


# ------------------------------------------------------------------------------
#
if __name__ == "__main__":

    if len(sys.argv) != 2:
        sys.stderr.write('error: argument error\n'
                         'usage: %s <cfg_file>\n\n' % sys.argv[0])
        raise RuntimeError('argument error: %s' % sys.argv)

    cfg = ru.read_json(sys.argv[1])
    uid = cfg['uid']

    ru_def = ru.DefaultConfig()
    for key, val in cfg['ru_def'].iteritems():
        ru_def[key] = val

    if  os.path.exists(cfg['fpid']):
        raise RuntimeError('component already running: %s' % (uid))

    spt.setproctitle('rp.%s' % uid)

  # ru.pid_watcher(pid=cfg.get('ppid'), uid=uid)

    # create the component
    comp = rpu.Component.create(cfg)
    comp.start()

    # report pid
    with open(cfg['fpid'], 'w') as fout:
        fout.write('%-3s %s\n' % ('PID', os.getpid()))

    comp.wait()


# ------------------------------------------------------------------------------

